#!/usr/bin/env ruby

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gomicro/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

include Hooky::Influxdb
config = converge( CONFIG_DEFAULTS, payload[:config] )

dedicated = payload[:component][:dedicated] || false

if payload[:platform] != 'local'

  # Setup root keys for data migrations
  directory '/root/.ssh' do
    recursive true
  end

  file '/root/.ssh/id_rsa' do
    content payload[:ssh][:admin_key][:private_key]
    mode 0600
  end

  file '/root/.ssh/id_rsa.pub' do
    content payload[:ssh][:admin_key][:public_key]
  end

  file '/root/.ssh/authorized_keys' do
    content payload[:ssh][:admin_key][:public_key]
  end

  # Create some ssh host keys
  execute "ssh-keygen -f /opt/gomicro/etc/ssh/ssh_host_rsa_key -N '' -t rsa" do
    not_if { ::File.exists? '/opt/gomicro/etc/ssh/ssh_host_rsa_key' }
  end

  execute "ssh-keygen -f /opt/gomicro/etc/ssh/ssh_host_dsa_key -N '' -t dsa" do
    not_if { ::File.exists? '/opt/gomicro/etc/ssh/ssh_host_dsa_key' }
  end

  execute "ssh-keygen -f /opt/gomicro/etc/ssh/ssh_host_ecdsa_key -N '' -t ecdsa" do
    not_if { ::File.exists? '/opt/gomicro/etc/ssh/ssh_host_ecdsa_key' }
  end

  execute "ssh-keygen -f /opt/gomicro/etc/ssh/ssh_host_ed25519_key -N '' -t ed25519" do
    not_if { ::File.exists? '/opt/gomicro/etc/ssh/ssh_host_ed25519_key' }
  end

end

if payload[:logvac_host]
  # Configure narc
  template '/opt/gomicro/etc/narc.conf' do
    variables ({
      uid: payload[:component][:uid],
      logvac: payload[:logvac_host]
    })
  end

  directory '/etc/service/narc'

  file '/etc/service/narc/run' do
    mode 0755
    content <<-EOF
  #!/bin/sh -e
  export PATH="/opt/local/sbin:/opt/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/gomicro/sbin:/opt/gomicro/bin"

  exec /opt/gomicro/bin/narcd /opt/gomicro/etc/narc.conf
    EOF
  end
end

# ensure data directory exists
directory '/data/var/db/influxdb/data' do
  recursive true
end

# chown /data/var/db/influxdb for gomicro
execute 'chown /data/var/db/influxdb' do
  command 'chown -R gomicro:gomicro /data/var/db/influxdb'
end

# ensure kapacitor data directory exists
directory '/data/var/lib/kapacitor' do
  recursive true
end

# chown /data/var/lib/kapacitor for gomicro
execute 'chown /data/var/lib/kapacitor' do
  command 'chown -R gomicro:gomicro /data/var/lib/kapacitor'
end

# ensure the etc config directory exists
directory '/data/etc/influxdb' do
  recursive true
end

# chown data/var/db/influxdb for gomicro
execute 'chown /data/etc/influxdb' do
  command 'chown -R gomicro:gomicro /data/etc/influxdb'
end

# generate the config file
template '/data/etc/influxdb/influxdb.conf' do
  source 'influxdb.conf.erb'
  mode 0644
  owner 'gomicro'
  group 'gomicro'
  variables ({
    config: config
  })
end

# ensure the kapacitor etc config directory exists
directory '/data/etc/kapacitor' do
  recursive true
end

# chown data/var/db/kapacitor for gomicro
execute 'chown /data/etc/kapacitor' do
  command 'chown -R gomicro:gomicro /data/etc/kapacitor'
end

# generate the kapacitor config file
template '/data/etc/kapacitor/kapacitor.conf' do
  source 'kapacitor.conf.erb'
  mode 0644
  owner 'gomicro'
  group 'gomicro'
  variables ({
    config: config
  })
end

# Import service (and start)
directory '/etc/service/influxdb' do
  recursive true
end

directory '/etc/service/influxdb/log' do
  recursive true
end

template '/etc/service/influxdb/log/run' do
  mode 0755
  source 'log-run.erb'
  variables ({ svc: "influxdb" })
end

template '/etc/service/influxdb/run' do
  mode 0755
  variables ({ exec: "influxd -config /data/etc/influxdb/influxdb.conf 2>&1" })
end

ensure_socket 'influxdb' do
  port '8086' # TODO: use configurable, or make not configurable in boxfile
  action :listening
end

# TODO: add user authentication https://docs.influxdata.com/influxdb/v1.0/query_language/authentication_and_authorization/#user-types-and-their-privileges
# will need to set http_auth_enabled to true

# Import kapacitor service (and start)
directory '/etc/service/kapacitor' do
  recursive true
end

directory '/etc/service/kapacitor/log' do
  recursive true
end

template '/etc/service/kapacitor/log/run' do
  mode 0755
  source 'log-run.erb'
  variables ({ svc: "kapacitor" })
end

template '/etc/service/kapacitor/run' do
  mode 0755
  variables ({ exec: "kapacitord -config /data/etc/kapacitor/kapacitor.conf 2>&1" })
end
